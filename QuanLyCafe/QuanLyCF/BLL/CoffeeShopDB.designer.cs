#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BLL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CoffeeShopDB")]
	public partial class CoffeeShopDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployeePermission(EmployeePermission instance);
    partial void UpdateEmployeePermission(EmployeePermission instance);
    partial void DeleteEmployeePermission(EmployeePermission instance);
    partial void InserttypeProduct(typeProduct instance);
    partial void UpdatetypeProduct(typeProduct instance);
    partial void DeletetypeProduct(typeProduct instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertIncoming(Incoming instance);
    partial void UpdateIncoming(Incoming instance);
    partial void DeleteIncoming(Incoming instance);
    partial void InsertIncomings_Detail(Incomings_Detail instance);
    partial void UpdateIncomings_Detail(Incomings_Detail instance);
    partial void DeleteIncomings_Detail(Incomings_Detail instance);
    partial void Insertmaterial(material instance);
    partial void Updatematerial(material instance);
    partial void Deletematerial(material instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermissionScreen(PermissionScreen instance);
    partial void UpdatePermissionScreen(PermissionScreen instance);
    partial void DeletePermissionScreen(PermissionScreen instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertScreen(Screen instance);
    partial void UpdateScreen(Screen instance);
    partial void DeleteScreen(Screen instance);
    partial void Insertsupplier(supplier instance);
    partial void Updatesupplier(supplier instance);
    partial void Deletesupplier(supplier instance);
    partial void InserttablesT(tablesT instance);
    partial void UpdatetablesT(tablesT instance);
    partial void DeletetablesT(tablesT instance);
    partial void InsertTypeMaterial(TypeMaterial instance);
    partial void UpdateTypeMaterial(TypeMaterial instance);
    partial void DeleteTypeMaterial(TypeMaterial instance);
    #endregion
		
		public CoffeeShopDBDataContext() : 
				base(global::BLL.Properties.Settings.Default.CoffeeShopDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeShopDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeShopDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeShopDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeShopDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EmployeePermission> EmployeePermissions
		{
			get
			{
				return this.GetTable<EmployeePermission>();
			}
		}
		
		public System.Data.Linq.Table<typeProduct> typeProducts
		{
			get
			{
				return this.GetTable<typeProduct>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Incoming> Incomings
		{
			get
			{
				return this.GetTable<Incoming>();
			}
		}
		
		public System.Data.Linq.Table<Incomings_Detail> Incomings_Details
		{
			get
			{
				return this.GetTable<Incomings_Detail>();
			}
		}
		
		public System.Data.Linq.Table<material> materials
		{
			get
			{
				return this.GetTable<material>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionScreen> PermissionScreens
		{
			get
			{
				return this.GetTable<PermissionScreen>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Screen> Screens
		{
			get
			{
				return this.GetTable<Screen>();
			}
		}
		
		public System.Data.Linq.Table<supplier> suppliers
		{
			get
			{
				return this.GetTable<supplier>();
			}
		}
		
		public System.Data.Linq.Table<tablesT> tablesTs
		{
			get
			{
				return this.GetTable<tablesT>();
			}
		}
		
		public System.Data.Linq.Table<TypeMaterial> TypeMaterials
		{
			get
			{
				return this.GetTable<TypeMaterial>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeePermissions")]
	public partial class EmployeePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeePermissionID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _PermissionID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeePermissionIDChanging(int value);
    partial void OnEmployeePermissionIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnPermissionIDChanging(System.Nullable<int> value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public EmployeePermission()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeePermissionID
		{
			get
			{
				return this._EmployeePermissionID;
			}
			set
			{
				if ((this._EmployeePermissionID != value))
				{
					this.OnEmployeePermissionIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeePermissionID = value;
					this.SendPropertyChanged("EmployeePermissionID");
					this.OnEmployeePermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int")]
		public System.Nullable<int> PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeePermission", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeePermissions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeePermissions.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_EmployeePermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.EmployeePermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.EmployeePermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.typeProduct")]
	public partial class typeProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeProductID;
		
		private string _typeProductName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeProductIDChanging(int value);
    partial void OntypeProductIDChanged();
    partial void OntypeProductNameChanging(string value);
    partial void OntypeProductNameChanged();
    #endregion
		
		public typeProduct()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int typeProductID
		{
			get
			{
				return this._typeProductID;
			}
			set
			{
				if ((this._typeProductID != value))
				{
					this.OntypeProductIDChanging(value);
					this.SendPropertyChanging();
					this._typeProductID = value;
					this.SendPropertyChanged("typeProductID");
					this.OntypeProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeProductName", DbType="NVarChar(100)")]
		public string typeProductName
		{
			get
			{
				return this._typeProductName;
			}
			set
			{
				if ((this._typeProductName != value))
				{
					this.OntypeProductNameChanging(value);
					this.SendPropertyChanging();
					this._typeProductName = value;
					this.SendPropertyChanged("typeProductName");
					this.OntypeProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="typeProduct_Product", Storage="_Products", ThisKey="typeProductID", OtherKey="typeProductID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.typeProduct = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.typeProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Password;
		
		private EntitySet<EmployeePermission> _EmployeePermissions;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeePermissions = new EntitySet<EmployeePermission>(new Action<EmployeePermission>(this.attach_EmployeePermissions), new Action<EmployeePermission>(this.detach_EmployeePermissions));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}

        public Employee(string firstname, string lastname, string email, string pass)
        {
            FirstName = firstname;
            LastName = lastname;
            Email = email;
            Password = pass;
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeePermission", Storage="_EmployeePermissions", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeePermission> EmployeePermissions
		{
			get
			{
				return this._EmployeePermissions;
			}
			set
			{
				this._EmployeePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Orders", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}

        public string Pass { get; }

        public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeePermissions(EmployeePermission entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeePermissions(EmployeePermission entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Incomings")]
	public partial class Incoming : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IncomingID;
		
		private System.Nullable<System.DateTime> _IncomingDate;
		
		private System.Nullable<double> _total_Price;
		
		private System.Nullable<double> _amount_paid;
		
		private EntitySet<Incomings_Detail> _Incomings_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncomingIDChanging(int value);
    partial void OnIncomingIDChanged();
    partial void OnIncomingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIncomingDateChanged();
    partial void Ontotal_PriceChanging(System.Nullable<double> value);
    partial void Ontotal_PriceChanged();
    partial void Onamount_paidChanging(System.Nullable<double> value);
    partial void Onamount_paidChanged();
    #endregion
		
		public Incoming()
		{
			this._Incomings_Details = new EntitySet<Incomings_Detail>(new Action<Incomings_Detail>(this.attach_Incomings_Details), new Action<Incomings_Detail>(this.detach_Incomings_Details));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IncomingID
		{
			get
			{
				return this._IncomingID;
			}
			set
			{
				if ((this._IncomingID != value))
				{
					this.OnIncomingIDChanging(value);
					this.SendPropertyChanging();
					this._IncomingID = value;
					this.SendPropertyChanged("IncomingID");
					this.OnIncomingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IncomingDate
		{
			get
			{
				return this._IncomingDate;
			}
			set
			{
				if ((this._IncomingDate != value))
				{
					this.OnIncomingDateChanging(value);
					this.SendPropertyChanging();
					this._IncomingDate = value;
					this.SendPropertyChanged("IncomingDate");
					this.OnIncomingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_Price", DbType="Float")]
		public System.Nullable<double> total_Price
		{
			get
			{
				return this._total_Price;
			}
			set
			{
				if ((this._total_Price != value))
				{
					this.Ontotal_PriceChanging(value);
					this.SendPropertyChanging();
					this._total_Price = value;
					this.SendPropertyChanged("total_Price");
					this.Ontotal_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount_paid", DbType="Float")]
		public System.Nullable<double> amount_paid
		{
			get
			{
				return this._amount_paid;
			}
			set
			{
				if ((this._amount_paid != value))
				{
					this.Onamount_paidChanging(value);
					this.SendPropertyChanging();
					this._amount_paid = value;
					this.SendPropertyChanged("amount_paid");
					this.Onamount_paidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Incoming_Incomings_Detail", Storage="_Incomings_Details", ThisKey="IncomingID", OtherKey="IncomingID")]
		public EntitySet<Incomings_Detail> Incomings_Details
		{
			get
			{
				return this._Incomings_Details;
			}
			set
			{
				this._Incomings_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Incomings_Details(Incomings_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Incoming = this;
		}
		
		private void detach_Incomings_Details(Incomings_Detail entity)
		{
			this.SendPropertyChanging();
			entity.Incoming = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Incomings_Detail")]
	public partial class Incomings_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Incomings_Detail_ID;
		
		private System.Nullable<int> _IncomingID;
		
		private System.Nullable<int> _Materials_ID;
		
		private System.Nullable<int> _quantity;
		
		private System.Nullable<double> _price;
		
		private EntityRef<Incoming> _Incoming;
		
		private EntityRef<material> _material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncomings_Detail_IDChanging(int value);
    partial void OnIncomings_Detail_IDChanged();
    partial void OnIncomingIDChanging(System.Nullable<int> value);
    partial void OnIncomingIDChanged();
    partial void OnMaterials_IDChanging(System.Nullable<int> value);
    partial void OnMaterials_IDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    #endregion
		
		public Incomings_Detail()
		{
			this._Incoming = default(EntityRef<Incoming>);
			this._material = default(EntityRef<material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Incomings_Detail_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Incomings_Detail_ID
		{
			get
			{
				return this._Incomings_Detail_ID;
			}
			set
			{
				if ((this._Incomings_Detail_ID != value))
				{
					this.OnIncomings_Detail_IDChanging(value);
					this.SendPropertyChanging();
					this._Incomings_Detail_ID = value;
					this.SendPropertyChanged("Incomings_Detail_ID");
					this.OnIncomings_Detail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingID", DbType="Int")]
		public System.Nullable<int> IncomingID
		{
			get
			{
				return this._IncomingID;
			}
			set
			{
				if ((this._IncomingID != value))
				{
					if (this._Incoming.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncomingIDChanging(value);
					this.SendPropertyChanging();
					this._IncomingID = value;
					this.SendPropertyChanged("IncomingID");
					this.OnIncomingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Materials_ID", DbType="Int")]
		public System.Nullable<int> Materials_ID
		{
			get
			{
				return this._Materials_ID;
			}
			set
			{
				if ((this._Materials_ID != value))
				{
					if (this._material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterials_IDChanging(value);
					this.SendPropertyChanging();
					this._Materials_ID = value;
					this.SendPropertyChanged("Materials_ID");
					this.OnMaterials_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Incoming_Incomings_Detail", Storage="_Incoming", ThisKey="IncomingID", OtherKey="IncomingID", IsForeignKey=true)]
		public Incoming Incoming
		{
			get
			{
				return this._Incoming.Entity;
			}
			set
			{
				Incoming previousValue = this._Incoming.Entity;
				if (((previousValue != value) 
							|| (this._Incoming.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Incoming.Entity = null;
						previousValue.Incomings_Details.Remove(this);
					}
					this._Incoming.Entity = value;
					if ((value != null))
					{
						value.Incomings_Details.Add(this);
						this._IncomingID = value.IncomingID;
					}
					else
					{
						this._IncomingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Incoming");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="material_Incomings_Detail", Storage="_material", ThisKey="Materials_ID", OtherKey="Materials_ID", IsForeignKey=true)]
		public material material
		{
			get
			{
				return this._material.Entity;
			}
			set
			{
				material previousValue = this._material.Entity;
				if (((previousValue != value) 
							|| (this._material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._material.Entity = null;
						previousValue.Incomings_Details.Remove(this);
					}
					this._material.Entity = value;
					if ((value != null))
					{
						value.Incomings_Details.Add(this);
						this._Materials_ID = value.Materials_ID;
					}
					else
					{
						this._Materials_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.materials")]
	public partial class material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Materials_ID;
		
		private string _Materials_Name;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _supplieriD;
		
		private System.Nullable<int> _quantity;
		
		private System.Nullable<int> _TypeID;
		
		private EntitySet<Incomings_Detail> _Incomings_Details;
		
		private EntityRef<supplier> _supplier;
		
		private EntityRef<TypeMaterial> _TypeMaterial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterials_IDChanging(int value);
    partial void OnMaterials_IDChanged();
    partial void OnMaterials_NameChanging(string value);
    partial void OnMaterials_NameChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnsupplieriDChanging(System.Nullable<int> value);
    partial void OnsupplieriDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    #endregion
		
		public material()
		{
			this._Incomings_Details = new EntitySet<Incomings_Detail>(new Action<Incomings_Detail>(this.attach_Incomings_Details), new Action<Incomings_Detail>(this.detach_Incomings_Details));
			this._supplier = default(EntityRef<supplier>);
			this._TypeMaterial = default(EntityRef<TypeMaterial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Materials_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Materials_ID
		{
			get
			{
				return this._Materials_ID;
			}
			set
			{
				if ((this._Materials_ID != value))
				{
					this.OnMaterials_IDChanging(value);
					this.SendPropertyChanging();
					this._Materials_ID = value;
					this.SendPropertyChanged("Materials_ID");
					this.OnMaterials_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Materials_Name", DbType="NVarChar(100)")]
		public string Materials_Name
		{
			get
			{
				return this._Materials_Name;
			}
			set
			{
				if ((this._Materials_Name != value))
				{
					this.OnMaterials_NameChanging(value);
					this.SendPropertyChanging();
					this._Materials_Name = value;
					this.SendPropertyChanged("Materials_Name");
					this.OnMaterials_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplieriD", DbType="Int")]
		public System.Nullable<int> supplieriD
		{
			get
			{
				return this._supplieriD;
			}
			set
			{
				if ((this._supplieriD != value))
				{
					if (this._supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsupplieriDChanging(value);
					this.SendPropertyChanging();
					this._supplieriD = value;
					this.SendPropertyChanged("supplieriD");
					this.OnsupplieriDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._TypeMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="material_Incomings_Detail", Storage="_Incomings_Details", ThisKey="Materials_ID", OtherKey="Materials_ID")]
		public EntitySet<Incomings_Detail> Incomings_Details
		{
			get
			{
				return this._Incomings_Details;
			}
			set
			{
				this._Incomings_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="supplier_material", Storage="_supplier", ThisKey="supplieriD", OtherKey="supplierID", IsForeignKey=true)]
		public supplier supplier
		{
			get
			{
				return this._supplier.Entity;
			}
			set
			{
				supplier previousValue = this._supplier.Entity;
				if (((previousValue != value) 
							|| (this._supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._supplier.Entity = null;
						previousValue.materials.Remove(this);
					}
					this._supplier.Entity = value;
					if ((value != null))
					{
						value.materials.Add(this);
						this._supplieriD = value.supplierID;
					}
					else
					{
						this._supplieriD = default(Nullable<int>);
					}
					this.SendPropertyChanged("supplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaterial_material", Storage="_TypeMaterial", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public TypeMaterial TypeMaterial
		{
			get
			{
				return this._TypeMaterial.Entity;
			}
			set
			{
				TypeMaterial previousValue = this._TypeMaterial.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaterial.Entity = null;
						previousValue.materials.Remove(this);
					}
					this._TypeMaterial.Entity = value;
					if ((value != null))
					{
						value.materials.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeMaterial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Incomings_Details(Incomings_Detail entity)
		{
			this.SendPropertyChanging();
			entity.material = this;
		}
		
		private void detach_Incomings_Details(Incomings_Detail entity)
		{
			this.SendPropertyChanging();
			entity.material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetails")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailID;
		
		private System.Nullable<int> _OrderID;
		
		private System.Nullable<int> _ProductID;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIDChanging(int value);
    partial void OnOrderDetailIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int")]
		public System.Nullable<int> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _TablesID;
		
		private System.Nullable<int> _status;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<tablesT> _tablesT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnTablesIDChanging(System.Nullable<int> value);
    partial void OnTablesIDChanged();
    partial void OnstatusChanging(System.Nullable<int> value);
    partial void OnstatusChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Employee = default(EntityRef<Employee>);
			this._tablesT = default(EntityRef<tablesT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TablesID", DbType="Int")]
		public System.Nullable<int> TablesID
		{
			get
			{
				return this._TablesID;
			}
			set
			{
				if ((this._TablesID != value))
				{
					if (this._tablesT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTablesIDChanging(value);
					this.SendPropertyChanging();
					this._TablesID = value;
					this.SendPropertyChanged("TablesID");
					this.OnTablesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int")]
		public System.Nullable<int> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tablesT_Order", Storage="_tablesT", ThisKey="TablesID", OtherKey="TableID", IsForeignKey=true)]
		public tablesT tablesT
		{
			get
			{
				return this._tablesT.Entity;
			}
			set
			{
				tablesT previousValue = this._tablesT.Entity;
				if (((previousValue != value) 
							|| (this._tablesT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tablesT.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._tablesT.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._TablesID = value.TableID;
					}
					else
					{
						this._TablesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tablesT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private string _PermissionName;
		
		private EntitySet<EmployeePermission> _EmployeePermissions;
		
		private EntitySet<PermissionScreen> _PermissionScreens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    #endregion
		
		public Permission()
		{
			this._EmployeePermissions = new EntitySet<EmployeePermission>(new Action<EmployeePermission>(this.attach_EmployeePermissions), new Action<EmployeePermission>(this.detach_EmployeePermissions));
			this._PermissionScreens = new EntitySet<PermissionScreen>(new Action<PermissionScreen>(this.attach_PermissionScreens), new Action<PermissionScreen>(this.detach_PermissionScreens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionName", DbType="NVarChar(50)")]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_EmployeePermission", Storage="_EmployeePermissions", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<EmployeePermission> EmployeePermissions
		{
			get
			{
				return this._EmployeePermissions;
			}
			set
			{
				this._EmployeePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionScreen", Storage="_PermissionScreens", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<PermissionScreen> PermissionScreens
		{
			get
			{
				return this._PermissionScreens;
			}
			set
			{
				this._PermissionScreens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeePermissions(EmployeePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_EmployeePermissions(EmployeePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_PermissionScreens(PermissionScreen entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_PermissionScreens(PermissionScreen entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionScreens")]
	public partial class PermissionScreen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionScreenID;
		
		private System.Nullable<int> _PermissionID;
		
		private System.Nullable<int> _ScreenID;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Screen> _Screen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionScreenIDChanging(int value);
    partial void OnPermissionScreenIDChanged();
    partial void OnPermissionIDChanging(System.Nullable<int> value);
    partial void OnPermissionIDChanged();
    partial void OnScreenIDChanging(System.Nullable<int> value);
    partial void OnScreenIDChanged();
    #endregion
		
		public PermissionScreen()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Screen = default(EntityRef<Screen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionScreenID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionScreenID
		{
			get
			{
				return this._PermissionScreenID;
			}
			set
			{
				if ((this._PermissionScreenID != value))
				{
					this.OnPermissionScreenIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionScreenID = value;
					this.SendPropertyChanged("PermissionScreenID");
					this.OnPermissionScreenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int")]
		public System.Nullable<int> PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenID", DbType="Int")]
		public System.Nullable<int> ScreenID
		{
			get
			{
				return this._ScreenID;
			}
			set
			{
				if ((this._ScreenID != value))
				{
					if (this._Screen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScreenIDChanging(value);
					this.SendPropertyChanging();
					this._ScreenID = value;
					this.SendPropertyChanged("ScreenID");
					this.OnScreenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_PermissionScreen", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.PermissionScreens.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.PermissionScreens.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screen_PermissionScreen", Storage="_Screen", ThisKey="ScreenID", OtherKey="ScreenID", IsForeignKey=true)]
		public Screen Screen
		{
			get
			{
				return this._Screen.Entity;
			}
			set
			{
				Screen previousValue = this._Screen.Entity;
				if (((previousValue != value) 
							|| (this._Screen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Screen.Entity = null;
						previousValue.PermissionScreens.Remove(this);
					}
					this._Screen.Entity = value;
					if ((value != null))
					{
						value.PermissionScreens.Add(this);
						this._ScreenID = value.ScreenID;
					}
					else
					{
						this._ScreenID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Screen");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductName;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _typeProductID;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<typeProduct> _typeProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OntypeProductIDChanging(System.Nullable<int> value);
    partial void OntypeProductIDChanged();
    #endregion
		
		public Product()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._typeProduct = default(EntityRef<typeProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(255)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeProductID", DbType="Int")]
		public System.Nullable<int> typeProductID
		{
			get
			{
				return this._typeProductID;
			}
			set
			{
				if ((this._typeProductID != value))
				{
					if (this._typeProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeProductIDChanging(value);
					this.SendPropertyChanging();
					this._typeProductID = value;
					this.SendPropertyChanged("typeProductID");
					this.OntypeProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_OrderDetails", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="typeProduct_Product", Storage="_typeProduct", ThisKey="typeProductID", OtherKey="typeProductID", IsForeignKey=true)]
		public typeProduct typeProduct
		{
			get
			{
				return this._typeProduct.Entity;
			}
			set
			{
				typeProduct previousValue = this._typeProduct.Entity;
				if (((previousValue != value) 
							|| (this._typeProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._typeProduct.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._typeProduct.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._typeProductID = value.typeProductID;
					}
					else
					{
						this._typeProductID = default(Nullable<int>);
					}
					this.SendPropertyChanged("typeProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Screens")]
	public partial class Screen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScreenID;
		
		private string _ScreenName;
		
		private EntitySet<PermissionScreen> _PermissionScreens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScreenIDChanging(int value);
    partial void OnScreenIDChanged();
    partial void OnScreenNameChanging(string value);
    partial void OnScreenNameChanged();
    #endregion
		
		public Screen()
		{
			this._PermissionScreens = new EntitySet<PermissionScreen>(new Action<PermissionScreen>(this.attach_PermissionScreens), new Action<PermissionScreen>(this.detach_PermissionScreens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScreenID
		{
			get
			{
				return this._ScreenID;
			}
			set
			{
				if ((this._ScreenID != value))
				{
					this.OnScreenIDChanging(value);
					this.SendPropertyChanging();
					this._ScreenID = value;
					this.SendPropertyChanged("ScreenID");
					this.OnScreenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenName", DbType="NVarChar(50)")]
		public string ScreenName
		{
			get
			{
				return this._ScreenName;
			}
			set
			{
				if ((this._ScreenName != value))
				{
					this.OnScreenNameChanging(value);
					this.SendPropertyChanging();
					this._ScreenName = value;
					this.SendPropertyChanged("ScreenName");
					this.OnScreenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screen_PermissionScreen", Storage="_PermissionScreens", ThisKey="ScreenID", OtherKey="ScreenID")]
		public EntitySet<PermissionScreen> PermissionScreens
		{
			get
			{
				return this._PermissionScreens;
			}
			set
			{
				this._PermissionScreens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionScreens(PermissionScreen entity)
		{
			this.SendPropertyChanging();
			entity.Screen = this;
		}
		
		private void detach_PermissionScreens(PermissionScreen entity)
		{
			this.SendPropertyChanging();
			entity.Screen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.supplier")]
	public partial class supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _supplierID;
		
		private string _suplierName;
		
		private string _email;
		
		private string _address;
		
		private string _phone;
		
		private EntitySet<material> _materials;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsupplierIDChanging(int value);
    partial void OnsupplierIDChanged();
    partial void OnsuplierNameChanging(string value);
    partial void OnsuplierNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
		
		public supplier()
		{
			this._materials = new EntitySet<material>(new Action<material>(this.attach_materials), new Action<material>(this.detach_materials));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int supplierID
		{
			get
			{
				return this._supplierID;
			}
			set
			{
				if ((this._supplierID != value))
				{
					this.OnsupplierIDChanging(value);
					this.SendPropertyChanging();
					this._supplierID = value;
					this.SendPropertyChanged("supplierID");
					this.OnsupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_suplierName", DbType="NVarChar(100)")]
		public string suplierName
		{
			get
			{
				return this._suplierName;
			}
			set
			{
				if ((this._suplierName != value))
				{
					this.OnsuplierNameChanging(value);
					this.SendPropertyChanging();
					this._suplierName = value;
					this.SendPropertyChanged("suplierName");
					this.OnsuplierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(100)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="supplier_material", Storage="_materials", ThisKey="supplierID", OtherKey="supplieriD")]
		public EntitySet<material> materials
		{
			get
			{
				return this._materials;
			}
			set
			{
				this._materials.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_materials(material entity)
		{
			this.SendPropertyChanging();
			entity.supplier = this;
		}
		
		private void detach_materials(material entity)
		{
			this.SendPropertyChanging();
			entity.supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tablesT")]
	public partial class tablesT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableID;
		
		private System.Nullable<int> _status;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnstatusChanging(System.Nullable<int> value);
    partial void OnstatusChanged();
    #endregion
		
		public tablesT()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableID
		{
			get
			{
				return this._TableID;
			}
			set
			{
				if ((this._TableID != value))
				{
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._TableID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int")]
		public System.Nullable<int> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tablesT_Order", Storage="_Orders", ThisKey="TableID", OtherKey="TablesID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.tablesT = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.tablesT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeMaterials")]
	public partial class TypeMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private EntitySet<material> _materials;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public TypeMaterial()
		{
			this._materials = new EntitySet<material>(new Action<material>(this.attach_materials), new Action<material>(this.detach_materials));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(100)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeMaterial_material", Storage="_materials", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<material> materials
		{
			get
			{
				return this._materials;
			}
			set
			{
				this._materials.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_materials(material entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaterial = this;
		}
		
		private void detach_materials(material entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaterial = null;
		}
	}
}
#pragma warning restore 1591
